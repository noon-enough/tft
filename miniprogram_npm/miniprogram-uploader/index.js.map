{"version":3,"sources":["index.js","uploader.js","transform.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UPLOAD = void 0;\r\nvar uploader_1 = require(\"./uploader\");\r\nvar miniprogram_network_life_cycle_1 = require(\"miniprogram-network-life-cycle\");\r\nObject.defineProperty(exports, \"CancelToken\", { enumerable: true, get: function () { return miniprogram_network_life_cycle_1.CancelToken; } });\r\nvar transform_1 = require(\"./transform\");\r\nObject.defineProperty(exports, \"transformUploadResponseOkData\", { enumerable: true, get: function () { return transform_1.transformUploadResponseOkData; } });\r\nObject.defineProperty(exports, \"transformUploadSendDefault\", { enumerable: true, get: function () { return transform_1.transformUploadSendDefault; } });\r\nvar uploader_2 = require(\"./uploader\");\r\nObject.defineProperty(exports, \"Uploader\", { enumerable: true, get: function () { return uploader_2.Uploader; } });\r\n/**\r\n * 预定义全局 Upload 对象\r\n */\r\n// tslint:disable-next-line: export-name\r\nexports.UPLOAD = new uploader_1.Uploader();\r\n//# sourceMappingURL=index.js.map","\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Uploader = void 0;\r\nvar miniprogram_network_life_cycle_1 = require(\"miniprogram-network-life-cycle\");\r\nvar transform_1 = require(\"./transform\");\r\n/**\r\n * 上传管理\r\n */\r\nvar Uploader = /** @class */ (function (_super) {\r\n    __extends(Uploader, _super);\r\n    /**\r\n     * 默认上传请求参数转换函数\r\n     */\r\n    // protected readonly TransformSendDefault = transformUploadSendDefault;\r\n    /**\r\n     * 创建Upload管理\r\n     * @param config 全局配置\r\n     * @param uploader 操作函数,默认使用上传队列\r\n     * @param listeners 上传事件监听通知\r\n     */\r\n    function Uploader(config, uploader, listeners) {\r\n        return _super.call(this, \r\n        // tslint:disable-next-line: no-use-before-declare\r\n        uploader || wx.uploadFile, config || { transformSend: transform_1.transformUploadSendDefault }, listeners) || this;\r\n    }\r\n    Uploader.prototype.upload = function () {\r\n        var argNum = arguments.length;\r\n        var options = argNum === 1 ? arguments[0] : (arguments[4] || {});\r\n        if (argNum > 1) {\r\n            options.filePath = arguments[0];\r\n            options.name = arguments[1];\r\n            options.url = arguments[2];\r\n            options.data = arguments[3];\r\n        }\r\n        return this.process(options);\r\n    };\r\n    return Uploader;\r\n}(miniprogram_network_life_cycle_1.LifeCycle));\r\nexports.Uploader = Uploader;\r\n//# sourceMappingURL=uploader.js.map","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.transformUploadResponseOkData = exports.transformUploadSendDefault = void 0;\r\nvar miniprogram_network_utils_1 = require(\"miniprogram-network-utils\");\r\n/**\r\n * 构建请求参数\r\n * baseUrl和dataUrl不同时为空\r\n * @param data - 完整参数\r\n */\r\nfunction transformUploadSendDefault(data) {\r\n    return miniprogram_network_utils_1.getCommonOptions({\r\n        url: miniprogram_network_utils_1.buildParams(data.url || '', data.params, data.baseURL),\r\n        formData: data.data,\r\n        header: data.headers\r\n    }, data, ['filePath', 'name']);\r\n}\r\nexports.transformUploadSendDefault = transformUploadSendDefault;\r\n/**\r\n * 根据错误码处理数据(会尝试JSON.parse)\r\n * statusCode 2xx 操作成功仅返回data数据\r\n * 否则抛出错误(rejected)\r\n * @param res - 返回结果\r\n * @param options - 全部配置\r\n * @returns 反序列化对象\r\n */\r\nfunction transformUploadResponseOkData(res, options) {\r\n    if (res.statusCode >= 200 && res.statusCode < 300) {\r\n        if (typeof res.data === 'string') {\r\n            try {\r\n                return JSON.parse(res.data);\r\n            }\r\n            catch (_a) {\r\n                // empty\r\n            }\r\n        }\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\nexports.transformUploadResponseOkData = transformUploadResponseOkData;\r\n//# sourceMappingURL=transform.js.map"]}