{"version":3,"sources":["index.js","cache-operator.js","cache.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cache_operator_1 = require(\"./cache-operator\");\r\nObject.defineProperty(exports, \"CacheOperator\", { enumerable: true, get: function () { return cache_operator_1.CacheOperator; } });\r\nObject.defineProperty(exports, \"defaultKeyBuilder\", { enumerable: true, get: function () { return cache_operator_1.defaultKeyBuilder; } });\r\nObject.defineProperty(exports, \"isOkResult\", { enumerable: true, get: function () { return cache_operator_1.isOkResult; } });\r\n//# sourceMappingURL=index.js.map","\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CacheOperator = exports.isOkResult = exports.defaultKeyBuilder = void 0;\r\nvar cache_1 = require(\"./cache\");\r\n/**\r\n * 删除数组中的元素\r\n * @param array 数组\r\n * @param value 值\r\n */\r\nfunction arrayRemove(array, value) {\r\n    var index = array.indexOf(value);\r\n    if (index >= 0) {\r\n        array.splice(index, 1);\r\n    }\r\n}\r\n/**\r\n * 是否为数组中的唯一元素\r\n * @param array 数组\r\n * @param value 值\r\n */\r\nfunction isEmptyOrOnly(array, value) {\r\n    return array.length === 0 || (array.length === 1 && array[0] === value);\r\n}\r\n/**\r\n * 默认缓存索引生成函数,\r\n * 使用 `url`,`method`,`responseType`,`dataType`,`filePath`,`name`参数 + `data`或`formData`构建缓存Key\r\n * 请求的`header` 默认会被忽略\r\n * @param opts 请求参数对象\r\n * @template TOptions 完整请求参数\r\n * @returns string\r\n */\r\nfunction defaultKeyBuilder(opts) {\r\n    /**\r\n     * 缓存的请求字段\r\n     * https://developers.weixin.qq.com/miniprogram/dev/api/wx.request.html\r\n     */\r\n    var CACHE_FIELDS = [\r\n        'url',\r\n        'method',\r\n        'responseType',\r\n        'dataType',\r\n        'filePath',\r\n        'name' // upload\r\n        // 'header'\r\n        // 'data'\r\n    ];\r\n    var data = opts.data || opts.formData;\r\n    return JSON.stringify(opts, CACHE_FIELDS) + (data ? JSON.stringify(data) : '');\r\n}\r\nexports.defaultKeyBuilder = defaultKeyBuilder;\r\n/**\r\n * 是否为2xx数据\r\n * @param res 完整返回数据\r\n */\r\nfunction isOkResult(res) {\r\n    return res && res.statusCode >= 200 && res.statusCode < 300;\r\n}\r\nexports.isOkResult = isOkResult;\r\n/**\r\n * 缓存操作,\r\n * 维护缓存结果,自动合并同样请求的并发操作\r\n * @template TRes 操作结果回调数据类型\r\n * @template TOptions 参数数据类型\r\n * @template TTask 微信任务类型\r\n */\r\nvar CacheOperator = /** @class */ (function () {\r\n    /**\r\n     * @param operator 底层操作\r\n     * @param config 默认配置\r\n     */\r\n    function CacheOperator(operator, config) {\r\n        this.cache = new cache_1.Cache();\r\n        /**\r\n         * 正在处理的回调\r\n         */\r\n        this.callbackListMap = {};\r\n        /**\r\n         * 处理完的回调,待删除\r\n         */\r\n        this.completeMap = {};\r\n        this.op = operator;\r\n        this.config = config || {\r\n            expire: 15 * 60 * 1000,\r\n            resultCondition: isOkResult\r\n        };\r\n    }\r\n    /**\r\n     * 快速创建一个\r\n     */\r\n    CacheOperator.createHandler = function (operator, config) {\r\n        var cacheOperator = new CacheOperator(operator, config);\r\n        return cacheOperator.handle.bind(cacheOperator);\r\n    };\r\n    /**\r\n     * 缓存处理\r\n     * @param options - 参数\r\n     */\r\n    CacheOperator.prototype.handle = function (options) {\r\n        var _this = this;\r\n        var keyBuilder = options.keyBuilder || this.config.keyBuilder || defaultKeyBuilder;\r\n        var key = keyBuilder(options);\r\n        if (!key) {\r\n            // 不缓存\r\n            return this.op(options);\r\n        }\r\n        var result = this.cache.get(key);\r\n        if (result) {\r\n            // 缓存命中\r\n            result.cache = (result.cache || 0) + 1;\r\n            try {\r\n                if (options.success) {\r\n                    options.success(result);\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.cache.delete(key);\r\n            }\r\n            if (options.complete) {\r\n                options.complete(result);\r\n            }\r\n        }\r\n        else if (this.callbackListMap[key]) {\r\n            // 请求已发送过\r\n            var callback = this.callbackListMap[key];\r\n            if (options.success) {\r\n                callback.success.push(options.success);\r\n            }\r\n            if (options.fail) {\r\n                callback.fail.push(options.fail);\r\n            }\r\n            if (options.complete) {\r\n                callback.complete.push(options.complete);\r\n            }\r\n        }\r\n        else {\r\n            // 请求未发送过\r\n            var data = __assign(__assign({}, options), { success: function (res) {\r\n                    var expire = options.expire === undefined ? _this.config.expire : options.expire;\r\n                    // 过期时间为0不缓存,但是会合并请求\r\n                    if (expire > 0 && (options.resultCondition || _this.config.resultCondition)(res)) {\r\n                        // 缓存请求结果\r\n                        _this.cache.set(key, res, expire);\r\n                    }\r\n                    _this._getMapBeforeComplete(key).success\r\n                        .forEach(function (v) { v(res); });\r\n                }, fail: function (res) {\r\n                    // fail 回调异步化 (微信实现可能是同步调用)\r\n                    // tslint:disable-next-line: no-floating-promises\r\n                    Promise.resolve(_this._getMapBeforeComplete(key).fail)\r\n                        .then(function (f) { f.forEach(function (v) { v(res); }); });\r\n                }, complete: function (res) {\r\n                    _this.completeMap[key].forEach(function (v) { v(res); });\r\n                    // tslint:disable-next-line: no-dynamic-delete\r\n                    delete _this.completeMap[key];\r\n                } });\r\n            this.callbackListMap[key] = {\r\n                success: options.success ? [options.success] : [],\r\n                fail: options.fail ? [options.fail] : [],\r\n                complete: options.complete ? [options.complete] : [],\r\n                task: {}\r\n            };\r\n            // 微信task同步创建异步调用\r\n            // 防止同步执行fail时 this.callbackListMap[key] 还未赋值\r\n            // 先赋值 this.callbackListMap[key] 再 执行  this.op(data))\r\n            return (this.callbackListMap[key].task = this.op(data));\r\n        }\r\n        // tslint:disable-next-line: no-object-literal-type-assertion\r\n        return {\r\n            abort: function () {\r\n                var cbMap = _this.callbackListMap[key];\r\n                if (cbMap) {\r\n                    if (isEmptyOrOnly(cbMap.success, options.success)\r\n                        && isEmptyOrOnly(cbMap.fail, options.fail)\r\n                        && isEmptyOrOnly(cbMap.complete, options.complete)) {\r\n                        cbMap.task.abort();\r\n                    }\r\n                    else {\r\n                        if (options.success) {\r\n                            arrayRemove(cbMap.success, options.success);\r\n                            var callbackList = [];\r\n                            if (options.fail) {\r\n                                arrayRemove(cbMap.fail, options.fail);\r\n                                callbackList.push(options.fail);\r\n                            }\r\n                            if (options.complete) {\r\n                                arrayRemove(cbMap.complete, options.complete);\r\n                                callbackList.push(options.complete);\r\n                            }\r\n                            var res_1 = { errMsg: 'request:fail abort', source: CacheOperator.name };\r\n                            callbackList.forEach(function (f) { f(res_1); });\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            onHeadersReceived: function (f) {\r\n                if (_this.callbackListMap[key]) {\r\n                    _this.callbackListMap[key].task.onHeadersReceived(f);\r\n                }\r\n                else {\r\n                    f(_this.cache.get(key) || {});\r\n                }\r\n            },\r\n            onProgressUpdate: function (f) {\r\n                if (_this.callbackListMap[key]) {\r\n                    var task = _this.callbackListMap[key].task;\r\n                    if (task.onProgressUpdate) {\r\n                        task.onProgressUpdate(f);\r\n                    }\r\n                }\r\n                else {\r\n                    f({ progress: 100 });\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * fixed #10\r\n     * 在回调中再次发起操作前清除任务\r\n     * @param key cacheKey\r\n     */\r\n    CacheOperator.prototype._getMapBeforeComplete = function (key) {\r\n        // remove the MapList from the `callbackMapList`\r\n        var list = this.callbackListMap[key];\r\n        // tslint:disable-next-line: no-dynamic-delete\r\n        delete this.callbackListMap[key];\r\n        this.completeMap[key] = list.complete;\r\n        return list;\r\n    };\r\n    return CacheOperator;\r\n}());\r\nexports.CacheOperator = CacheOperator;\r\n//# sourceMappingURL=cache-operator.js.map","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Cache = void 0;\r\n/** 缓存管理 */\r\nvar Cache = /** @class */ (function () {\r\n    function Cache() {\r\n        this.map = new Map();\r\n    }\r\n    /**\r\n     * 设置缓存\r\n     * @param key - 键\r\n     * @param value - 值\r\n     * @param expire - 有效期(毫秒)\r\n     */\r\n    // tslint:disable-next-line: no-reserved-keywords\r\n    Cache.prototype.set = function (key, value, expire) {\r\n        this.map.set(key, [value, expire > 0 ? Date.now() + expire : 0]);\r\n    };\r\n    /**\r\n     * 获取缓存，不存在返回undefined\r\n     * @param key - 键\r\n     */\r\n    // tslint:disable-next-line: no-reserved-keywords\r\n    Cache.prototype.get = function (key) {\r\n        if (this.map.has(key)) {\r\n            var _a = this.map.get(key), value = _a[0], expireTime = _a[1];\r\n            if (expireTime >= Date.now()) {\r\n                return value;\r\n            }\r\n            else {\r\n                this.map.delete(key);\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * 删除缓存，返回是否删除成功\r\n     * @param key - 键\r\n     */\r\n    // tslint:disable-next-line: no-reserved-keywords\r\n    Cache.prototype.delete = function (key) {\r\n        return this.map.delete(key);\r\n    };\r\n    /**\r\n     * 缓存是否存在\r\n     * @param key - 键\r\n     */\r\n    Cache.prototype.has = function (key) {\r\n        if (this.map.has(key)) {\r\n            if (this.map.get(key)[1] > Date.now()) {\r\n                return true;\r\n            }\r\n            this.map.delete(key);\r\n        }\r\n        return false;\r\n    };\r\n    return Cache;\r\n}());\r\nexports.Cache = Cache;\r\n//# sourceMappingURL=cache.js.map"]}